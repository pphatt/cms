// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

enum UserRole {
  ADMIN
  STUDENT
  MARKETING_COORDINATOR
  MARKETING_MANAGER
  GUEST
}

enum StatusEnum {
  APPROVE
  PENDING
  REJECT
}

enum ActiveStatusEnum {
  ACTIVE
  SUSPENDED
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STUDENT)
  address       String?
  city          String?
  phoneNumber   String?
  createdAt     DateTime  @default(now())

  faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId String?

  facultyCreated Faculty[] @relation("FacultyCreatedBy")

  academicYearCreated AcademicYear[] @relation("AcademicYearCreatedBy")

  accounts Account[]
  Blogs    Blogs[]
  Comment  Comment[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Faculty {
  id        String           @id @default(cuid())
  name      String
  createdAt DateTime         @default(now())
  status    ActiveStatusEnum @default(ACTIVE)

  creatorId String
  creator   User   @relation("FacultyCreatedBy", fields: [creatorId], references: [id])

  user  User[]
  blogs Blogs[]

  @@unique([name])
}

model AcademicYear {
  id          String           @id @default(cuid())
  name        String
  createdAt   DateTime         @default(now())
  description String
  status      ActiveStatusEnum @default(ACTIVE)

  startDate        DateTime
  closureDate      DateTime @db.Timestamptz(3)
  finalClosureDate DateTime

  creatorId String
  creator   User   @relation("AcademicYearCreatedBy", fields: [creatorId], references: [id])

  blogs Blogs[]
}

model Blogs {
  id              String     @id @default(cuid())
  title           String
  content         Json
  backgroundImage String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  publicized      Boolean    @default(false)
  status          StatusEnum @default(PENDING)

  location String[] // store as array for multi contribution string[]

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  blog      Blogs    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")
}
